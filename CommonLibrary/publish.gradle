apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

afterEvaluate {
    publishing {
        publications {
            mavenAndroid(MavenPublication) {
                groupId rootProject.ext.maven.groupId
                artifactId 'AndroidCommonLibrary'
                version '3.2.4'
                artifact sourcesJar
                artifact javadocJar
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                pom {
                    packaging = 'aar'
                    // 解决依赖关系
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.all { configuration ->
                            def name = configuration.name
                            if (name != "implementation" && name != "compile" && name != "api") {
                                return
                            }
                            println(configuration)
                            configuration.dependencies.each {
                                println(it)
                                if (it.name == "unspecified") {
                                    // 忽略无法识别的
                                    return
                                }
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                if (name == "api" || name == "compile") {
                                    dependencyNode.appendNode("scope", "compile")
                                } else { // implementation
                                    dependencyNode.appendNode("scope", "runtime")
                                }
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = rootProject.ext.maven.repositoryUrl
                def snapshotsRepoUrl = rootProject.ext.maven.repositorySnapshotUrl
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username rootProject.ext.maven.username
                    password rootProject.ext.maven.password
                }
            }
        }
    }
}
